/*
 * rwBrowseDialog.java
 *
 * Created on December 7, 2008, 6:58 PM
 */

package rwframework.controls;
import java.io.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
/**
 *
 * @author  destes
 */
public class rwBrowseDialog extends javax.swing.JFrame {

    /** Creates new form rwBrowseDialog */
    public ArrayList FieldData;
    public String TableName;
    public cDataHandler DataHandler;
    public ArrayList RecordResults;
    public javax.swing.table.DefaultTableModel MainTableModel;
    public String SearchString = "";
    public String FieldName = "";
    public rwTextField ReturnedField;
    public rwBrowseDialog(String TableName,String Fieldname,cDataHandler DataHandler,String[] Fields,rwTextField ReturnedField) {
        this.DataHandler = DataHandler;
        this.TableName = TableName;
        this.FieldName = Fieldname;
        this.ReturnedField = ReturnedField;
        initComponents();
        FieldData = new ArrayList();
        for(int x=0;x<Fields.length;x++)
        {
            String[] Params = Fields[x].split(",");
            ArrayList FieldSubinfo = new ArrayList();
            FieldSubinfo.add(Params[0]);
            FieldSubinfo.add(Params[1]);
            FieldData.add(FieldSubinfo);
        }
        DCOMActiveRecord startupRecord = new DCOMActiveRecord(DataHandler,TableName);
        RecordResults = startupRecord.find_all(DataHandler,TableName,null, null);
        GenerateTableModel();
        PopulateTable();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        tblSearchData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSearchDataKeyPressed(evt);
            }
        });
        tblSearchData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSearchDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSearchData);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-375)/2, (screenSize.height-167)/2, 375, 167);
    }// </editor-fold>//GEN-END:initComponents

private void tblSearchDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSearchDataMouseClicked
// TODO add your handling code here:
    if(evt.getClickCount() == 2)
    {
        int row = this.tblSearchData.getSelectedRow();
        if(row >= 0)
        {
            this.ReturnedField.PreviousValue = this.tblSearchData.getValueAt(row, 0).toString();

            this.ReturnedField.setText(this.ReturnedField.PreviousValue);
                    
            this.setVisible(false);
            this.ReturnedField.requestFocus();
        }
    }
}//GEN-LAST:event_tblSearchDataMouseClicked

private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
// TODO add your handling code here:
    System.out.println("Window Gained Focus");
    this.ReturnedField.hideDialog=false;
}//GEN-LAST:event_formWindowGainedFocus

private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
// TODO add your handling code here:
            int delay = 500; //milliseconds
            ReturnedField.hideDialog = true;
            ActionListener taskPerformer = new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    if(ReturnedField.hideDialog)
                        setVisible(false);
                }
            };
            new javax.swing.Timer(delay, taskPerformer).start();    
}//GEN-LAST:event_formWindowDeactivated

private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
// TODO add your handling code here:
    System.out.println("Window State Changed");
}//GEN-LAST:event_formWindowStateChanged

private void tblSearchDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSearchDataKeyPressed
    if(evt.getKeyCode() == evt.VK_ESCAPE)
    {
        this.setVisible(false);
        this.ReturnedField.requestFocus();
    }
}//GEN-LAST:event_tblSearchDataKeyPressed

    /**
    * @param args the command line arguments
    */
   public void GenerateMainModel()
    {
        int count = this.FieldData.size();
        String[] FieldNames = new String[count];
        boolean[] FieldsNoEdit = new boolean[count];
        for(int x=0;x<count;x++)
        {
            FieldNames[x] = ((ArrayList)this.FieldData.get(x)).get(0).toString();
            
            
            
                    
        }
           this.MainTableModel = new javax.swing.table.DefaultTableModel(null,FieldNames);
           
           
        
    }
    public void GenerateTableModel()
    {
        int count = this.FieldData.size();
        String[] FieldNames = new String[count];
        boolean[] FieldsNoEdit = new boolean[count];
        
        for(int x=0;x<count;x++)
        {
            FieldNames[x] = ((ArrayList)this.FieldData.get(x)).get(0).toString();
            ArrayList FieldObject = ((ArrayList)this.FieldData.get(x));
            
            
            
                    
        }
           javax.swing.table.DefaultTableModel NewModel = new javax.swing.table.DefaultTableModel(null,FieldNames)
           {
          
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
           };
           this.tblSearchData.setModel(NewModel);
                   
          
         
            
    }
    
    public void PopulateTable()
        {
            
            javax.swing.table.DefaultTableModel ATable = (javax.swing.table.DefaultTableModel)this.tblSearchData.getModel();
            while(ATable.getRowCount() != 0)
            {
                ATable.removeRow(0);
            }
            int count = FieldData.size();
            //bool first = true;
           /* for(int x=0;x<count;x++)
            {
                ArrayList FieldObject = (ArrayList)FieldData.get(x);
                if(FieldObject.get(0).toString().equals(this.cmbSearchField.getSelectedItem().toString()))
                {
                    Column = x;
                }
            }*/
            for(int x=0;x<RecordResults.size();x++)
            {
                DCOMActiveRecord currentRecord = (DCOMActiveRecord)(RecordResults.get(x));
                if(currentRecord.getValue(FieldName).length() >= SearchString.length())
                {
                if(this.SearchString.length() > 0)
                {
                    
                    //System.out.println("Comparing: " + MainTableModel.getValueAt(x,Column).toString().substring(0,this.txtsearch.getText().length()) + " TO: " + this.txtsearch.getText());
                    if(currentRecord.getValue(FieldName).toString().substring(0,SearchString.length()).toUpperCase().equals(this.SearchString.toUpperCase()))
                    {
                        String[] FieldObjects = new String[count];
                        for(int y=0;y<FieldData.size();y++)
                        {
                            String FieldValue = currentRecord.getValue(((ArrayList)(FieldData.get(y))).get(1).toString());
                            
                            if(FieldValue != null)
                                FieldObjects[y] = FieldValue;
                        }
                        ATable.addRow(FieldObjects);
                        
                    }
                }
                else
                {
                        String[] FieldObjects = new String[count];
                        for(int y=0;y<FieldData.size();y++)
                        {
                            String FieldValue = currentRecord.getValue(((ArrayList)(FieldData.get(y))).get(1).toString());
                            
                            if(FieldValue != null)
                                FieldObjects[y] = FieldValue;
                        }
                        ATable.addRow(FieldObjects);
                }
                }    
                
            }
            
           
            
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSearchData;
    // End of variables declaration//GEN-END:variables

}
