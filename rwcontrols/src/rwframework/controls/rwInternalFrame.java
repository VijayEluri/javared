/*
 * RWInternalFrame.java
 *
 * Created on December 2, 2008, 5:57 PM
 */

package rwframework.controls;
import javax.swing.*;
import java.awt.*;
/**
 *
 * @author  destes
 */
public class rwInternalFrame extends javax.swing.JInternalFrame {

    /** Creates new form RWInternalFrame */
    public rwframework.Application MainApplication;
    public rwToolbarStatus ToolbarStatus;
    public DCOMActiveRecord primaryRecord = null;
    public rwInternalFrame(rwframework.Application mainApp)
    {
        MainApplication = mainApp;
        ToolbarStatus = new rwToolbarStatus();
        initComponents();
        this.getContentPane().setBackground(java.awt.Color.WHITE);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Redwind Base Form");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeactivated(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 274, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-418)/2, (screenSize.height-320)/2, 418, 320);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
// TODO add your handling code here:
    this.MainApplication.txtGo.requestFocus();
}//GEN-LAST:event_formInternalFrameClosed

private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    if(evt.getKeyCode() == evt.VK_ESCAPE)
        this.dispose();
    
}//GEN-LAST:event_formKeyPressed

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
    this.MainApplication.FormFocusGained(this);    
    this.ApplyToolbarSettings();
}//GEN-LAST:event_formInternalFrameActivated

private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeactivated
// TODO add your handling code here:
    this.MainApplication.FormFocusLost();
    
}//GEN-LAST:event_formInternalFrameDeactivated

private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
    this.MainApplication.FormFocusLost();
}//GEN-LAST:event_formInternalFrameClosing
public void ApplyToolbarSettings()
{
    this.MainApplication.cmdSave.setEnabled(ToolbarStatus.isSave());
    this.MainApplication.cmdSaveClear.setEnabled(ToolbarStatus.isSaveClear());
    this.MainApplication.cmdClear.setEnabled(ToolbarStatus.isClear());
    this.MainApplication.cmdNew.setEnabled(ToolbarStatus.isNew());
    this.MainApplication.cmdDelete.setEnabled(ToolbarStatus.isDelete());
}
public void Save()
{
    if(primaryRecord == null)
        return;
        
    primaryRecord.update_attributes();
        if(primaryRecord.Loaded)
        {
            this.ToolbarStatus.setSave(true);
            this.ToolbarStatus.setClear(true);
            this.ToolbarStatus.setSaveClear(true);
            this.ToolbarStatus.setNew(false);
            this.ApplyToolbarSettings();
        }
}

public void Load()
{
    if(primaryRecord == null)
        return;
    primaryRecord.load();
        if(primaryRecord.Loaded)
        {
        this.ToolbarStatus.setSave(true);
        this.ToolbarStatus.setClear(true);
        this.ToolbarStatus.setSaveClear(true);
        this.ToolbarStatus.setDelete(true);
        }
        else
        {
         primaryRecord.new_record();
         this.ToolbarStatus.setNew(true); 
         this.ToolbarStatus.setClear(true);
         this.ToolbarStatus.setSaveClear(true);
        }
        this.ApplyToolbarSettings();
        this.setNonKeyState(true, this.getContentPane());
        
        primaryRecord.requestNonKeyFocus();
        
}

public void Clear()
{
    this.ToolbarStatus.setSave(false);
    this.ToolbarStatus.setClear(false);
    this.ToolbarStatus.setSaveClear(false);
    this.ToolbarStatus.setNew(false);
    this.ToolbarStatus.setDelete(false);

        this.ApplyToolbarSettings();
        if(primaryRecord == null)
            return;
        primaryRecord.reset();
   this.setNonKeyState(false, this.getContentPane());

}

public void New()
{
    Save();
}

public void SaveClear()
{
    Save();
    Clear();
}
public void Delete()
{
    if(primaryRecord == null)
        return;
     JOptionPane pane = new JOptionPane(
            "Are you sure you want to Delete?");
    Object[] options = new String[]{"Yes", "No"};
    pane.setOptions(options);
    JDialog dialog = pane.createDialog(this, "Are you sure?");

    dialog.setVisible(true);
    Object obj = pane.getValue();
    int result = -1;
    for (int k = 0; k < options.length; k++) {
        if (options[k].equals(obj)) {
            result = k;
        }
    }
    if (result == 1) {
        return;
    }
    if(primaryRecord.destroy())
        Clear();
    else
    {
        this.MainApplication.ErrorHandler.GenerateErrorMessage("There was an error deleting the record!");
        
    }
    
}
public void setNonKeyState(boolean NonKey,java.awt.Container Contents)
{   
    boolean focusfirst = false;
    for(int y=0;y<Contents.getComponentCount();y++)
    {
        if(Contents.getComponent(y).getClass().getSimpleName().equals("rwTextField"))
        {
            rwTextField currentTextField = (rwTextField)(Contents.getComponent(y));
            if(NonKey)
            {
                currentTextField.setEnabled(currentTextField.isDefaultNonKeyEnabled());
                
            }
            else
            {
                currentTextField.setEnabled(currentTextField.isDefaultKeyEnabled());
                if(!focusfirst && currentTextField.isDefaultKeyEnabled() == true)
                {
                    this.updateUI();
                    System.out.println("Trying to get Focus of "+ currentTextField.getName());
                    currentTextField.requestFocus();
                    focusfirst = true;
                }
            }
        }
        if(Contents.getComponent(y).getClass().getSimpleName().equals("BackgroundImagePanel"))
        {
            System.out.println("Checking Panel Contents of Container");
            this.setNonKeyState(NonKey,(Container)(Contents.getComponent(y)));
        }
        if(Contents.getComponent(y).getClass().getSimpleName().equals("rwCheckBox"))
        {
             rwCheckBox currentTextField = (rwCheckBox)(Contents.getComponent(y));
            if(NonKey)
            {
                currentTextField.setEnabled(currentTextField.isDefaultNonKeyEnabled());
            }
            else
            {
                currentTextField.setEnabled(currentTextField.isDefaultKeyEnabled());
            }
        }
        if(Contents.getComponent(y).getClass().getSimpleName().equals("rwComboBox"))
        {
             rwComboBox currentTextField = (rwComboBox)(Contents.getComponent(y));
            if(NonKey)
            {
                currentTextField.setEnabled(currentTextField.isDefaultNonKeyEnabled());
            }
            else
            {
                currentTextField.setEnabled(currentTextField.isDefaultKeyEnabled());
            }
        }
        if(Contents.getComponent(y).getClass().getSimpleName().equals("rwButton"))
        {
             rwButton currentTextField = (rwButton)(Contents.getComponent(y));
            if(NonKey)
            {
                currentTextField.setEnabled(currentTextField.isDefaultNonKeyEnabled());
            }
            else
            {
                currentTextField.setEnabled(currentTextField.isDefaultKeyEnabled());
            }
        }
        
    }
}
//Shortcut for printing data messages to the log
public void printLog(String function,String Message)
{
    String ClassName = this.getClass().getName();
    
    this.MainApplication.ErrorHandler.printLog(ClassName, function, Message);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
