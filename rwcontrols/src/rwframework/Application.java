/*
 * Application.java
 *
 * Created on December 2, 2008, 9:37 AM
 */
package rwframework;

import javax.swing.*;
import javax.swing.tree.*;
import java.awt.*;
import rwframework.controls.*;
import rwframework.models.*;
import org.jdom.*;
import org.jdom.input.*;
import java.util.List;
import java.io.*;
import java.lang.*;
import java.util.*;

/**
 *
 * @author  destes
 */
public class Application extends javax.swing.JFrame {

    /** Creates new form Application */
    private ImageIcon blackbar;
    public cDataHandler DataHandler;
    public cErrorHandler ErrorHandler;
    public Company CurrentCompany;
    public User CurrentUser;
    public DefaultMutableTreeNode CurrentNode = null;
    public rwframework.controls.rwInternalFrame CurrentSelectedForm;

    
    public Application(cDataHandler DataHandler, Company CurrentCompany, User CurrentUser) {
        this.DataHandler = DataHandler;
        this.ErrorHandler = DataHandler.ErrorHandler;
        this.CurrentCompany = CurrentCompany;
        this.CurrentUser = CurrentUser;
        this.CurrentSelectedForm = null;
        
        initComponents();
        String ToolbarImage = "/rwframework/images/blackbar.png";
        if(CurrentUser.getValue("toolbar_image") != null && !CurrentUser.getValue("toolbar_image").equals(""))
        {
            ToolbarImage = CurrentUser.getValue("toolbar_image");
        }
            
        java.net.URL imgURL = Application.class.getResource(ToolbarImage);
        java.net.URL imgURL2 = Application.class.getResource("/rwframework/images/light_grad.png");
        blackbar = new ImageIcon(imgURL);
        ImageIcon whitegrad = new ImageIcon(imgURL2);
        pnlToolbar.setBackgroundImage(blackbar.getImage(), true, false);
        pnlNavigation.setBackground(Color.WHITE);
        pnlNavigation.setBackgroundImage(whitegrad.getImage(), true, true);
        if(CurrentUser.getValue("use_enter") != null && CurrentUser.getValue("use_enter").equals("1"))
        {
         System.out.println("Adding Enter Key to Traversal");
        Set set = new HashSet( KeyboardFocusManager.getCurrentKeyboardFocusManager().getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        //set.clear();
        set.add(KeyStroke.getKeyStroke("ENTER"));
        KeyboardFocusManager.getCurrentKeyboardFocusManager().setDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,set);
        }
        loadNavigation();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlToolbar = new rwframework.controls.BackgroundImagePanel();
        jLabel1 = new javax.swing.JLabel();
        cmdNew = new javax.swing.JLabel();
        cmdSave = new javax.swing.JLabel();
        cmdSaveClear = new javax.swing.JLabel();
        cmdClear = new javax.swing.JLabel();
        cmdExit = new javax.swing.JLabel();
        cmdDelete = new javax.swing.JLabel();
        splitMain = new javax.swing.JSplitPane();
        PaneMain = new javax.swing.JDesktopPane();
        pnlNavigation = new rwframework.controls.BackgroundImagePanel();
        txtGo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        scrollNavigation = new javax.swing.JScrollPane();
        treeNavigation = new javax.swing.JTree();
        backgroundImagePanel1 = new rwframework.controls.BackgroundImagePanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/redwind-logo-hdr.png"))); // NOI18N

        cmdNew.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmdNew.setForeground(new java.awt.Color(255, 255, 255));
        cmdNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/add.png"))); // NOI18N
        cmdNew.setText("New");
        cmdNew.setEnabled(false);
        cmdNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdNewMouseClicked(evt);
            }
        });

        cmdSave.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmdSave.setForeground(new java.awt.Color(255, 255, 255));
        cmdSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/disk.png"))); // NOI18N
        cmdSave.setText("Save");
        cmdSave.setEnabled(false);
        cmdSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdSaveMouseClicked(evt);
            }
        });

        cmdSaveClear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmdSaveClear.setForeground(new java.awt.Color(255, 255, 255));
        cmdSaveClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/disk_multiple.png"))); // NOI18N
        cmdSaveClear.setText("Save/Clear");
        cmdSaveClear.setEnabled(false);
        cmdSaveClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSaveClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSaveClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdSaveClearMouseClicked(evt);
            }
        });

        cmdClear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmdClear.setForeground(new java.awt.Color(255, 255, 255));
        cmdClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/page.png"))); // NOI18N
        cmdClear.setText("Clear");
        cmdClear.setEnabled(false);
        cmdClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdClearMouseClicked(evt);
            }
        });

        cmdExit.setFont(new java.awt.Font("Arial", 0, 14));
        cmdExit.setForeground(new java.awt.Color(255, 255, 255));
        cmdExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/door_open.png"))); // NOI18N
        cmdExit.setText("Exit");
        cmdExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdExitMouseClicked(evt);
            }
        });

        cmdDelete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmdDelete.setForeground(new java.awt.Color(255, 255, 255));
        cmdDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/cross.png"))); // NOI18N
        cmdDelete.setText("Delete");
        cmdDelete.setEnabled(false);
        cmdDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdDeleteMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlToolbarLayout = new org.jdesktop.layout.GroupLayout(pnlToolbar);
        pnlToolbar.setLayout(pnlToolbarLayout);
        pnlToolbarLayout.setHorizontalGroup(
            pnlToolbarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlToolbarLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdNew)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdSave)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdSaveClear)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdClear)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmdDelete)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 331, Short.MAX_VALUE)
                .add(cmdExit)
                .addContainerGap())
        );
        pnlToolbarLayout.setVerticalGroup(
            pnlToolbarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlToolbarLayout.createSequentialGroup()
                .add(pnlToolbarLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmdExit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdSaveClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdNew, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmdDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20))
            .add(pnlToolbarLayout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(23, 23, 23))
        );

        splitMain.setDividerLocation(275);
        splitMain.setDividerSize(10);

        PaneMain.setBackground(new java.awt.Color(102, 102, 102));
        splitMain.setRightComponent(PaneMain);

        pnlNavigation.setOpaque(true);

        txtGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGoActionPerformed(evt);
            }
        });
        txtGo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGoKeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/arrow_right.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/application_osx_terminal.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        scrollNavigation.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scrollNavigation.setOpaque(false);

        treeNavigation.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeNavigationValueChanged(evt);
            }
        });
        treeNavigation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                treeNavigationKeyPressed(evt);
            }
        });
        treeNavigation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeNavigationMouseClicked(evt);
            }
        });
        scrollNavigation.setViewportView(treeNavigation);

        org.jdesktop.layout.GroupLayout pnlNavigationLayout = new org.jdesktop.layout.GroupLayout(pnlNavigation);
        pnlNavigation.setLayout(pnlNavigationLayout);
        pnlNavigationLayout.setHorizontalGroup(
            pnlNavigationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlNavigationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollNavigation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .add(pnlNavigationLayout.createSequentialGroup()
                        .add(txtGo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1)))
                .addContainerGap())
        );
        pnlNavigationLayout.setVerticalGroup(
            pnlNavigationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlNavigationLayout.createSequentialGroup()
                .add(37, 37, 37)
                .add(pnlNavigationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtGo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollNavigation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 348, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        splitMain.setLeftComponent(pnlNavigation);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/comment.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rwframework/images/icons/email.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout backgroundImagePanel1Layout = new org.jdesktop.layout.GroupLayout(backgroundImagePanel1);
        backgroundImagePanel1.setLayout(backgroundImagePanel1Layout);
        backgroundImagePanel1Layout.setHorizontalGroup(
            backgroundImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backgroundImagePanel1Layout.createSequentialGroup()
                .addContainerGap(803, Short.MAX_VALUE)
                .add(jLabel8)
                .add(18, 18, 18)
                .add(jLabel7)
                .addContainerGap())
        );
        backgroundImagePanel1Layout.setVerticalGroup(
            backgroundImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backgroundImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel8)
                .add(jLabel7))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlToolbar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(backgroundImagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(splitMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pnlToolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(splitMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backgroundImagePanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void txtGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGoActionPerformed
// TODO add your handling code here:
    if(CurrentNode == null)
    {
        CurrentNode = (DefaultMutableTreeNode)((javax.swing.tree.DefaultTreeModel)(treeNavigation.getModel())).getRoot();
    }
    boolean match = false;
    for(int i=0;i<CurrentNode.getChildCount();i++)
    {
        DefaultMutableTreeNode cNode = ((DefaultMutableTreeNode)CurrentNode.getChildAt(i));
        rwNavNode cNavNode = (rwNavNode)cNode.getUserObject();
        if(cNavNode.id.equals(txtGo.getText()))
        {
            javax.swing.tree.TreePath CurrentPath = new javax.swing.tree.TreePath(cNode.getPath());
            treeNavigation.setSelectionPath(CurrentPath);

            treeNavigation.scrollPathToVisible(CurrentPath);
            CurrentNode = cNode;
            treeNavigation.expandPath(CurrentPath);
            txtGo.setText("");
            if(CurrentNode.getChildCount() == 0)
            {
                if(cNavNode.Classname != null)
                {
                    LoadClass(cNavNode.Classname);
                }
            }
            match = true;
        }
    }
    if(!match)
    {
        DefaultMutableTreeNode ParentNode = (DefaultMutableTreeNode)CurrentNode.getParent();
        if(ParentNode != null)
        {
            for(int i=0;i<ParentNode.getChildCount();i++)
    {
        DefaultMutableTreeNode cNode = ((DefaultMutableTreeNode)ParentNode.getChildAt(i));
        rwNavNode cNavNode = (rwNavNode)cNode.getUserObject();
        if(cNavNode.id.equals(txtGo.getText()))
        {
            
            javax.swing.tree.TreePath OldPath = new javax.swing.tree.TreePath(CurrentNode.getPath());
            treeNavigation.collapsePath(OldPath);
            javax.swing.tree.TreePath CurrentPath = new javax.swing.tree.TreePath(cNode.getPath());
            treeNavigation.setSelectionPath(CurrentPath);

            treeNavigation.scrollPathToVisible(CurrentPath);
            CurrentNode = cNode;
            if(CurrentNode.getChildCount() == 0)
            {
                if(cNavNode.Classname != null)
                {
                    LoadClass(cNavNode.Classname);
                }
            }
            treeNavigation.expandPath(CurrentPath);
            txtGo.setText("");
            match = true;
        }
    }
        }
    }

    treeNavigation.updateUI();
    java.awt.Rectangle currentView = new java.awt.Rectangle(treeNavigation.getWidth()+50,scrollNavigation.getViewportBorderBounds().y,1,1);

    treeNavigation.scrollRectToVisible(currentView);
}//GEN-LAST:event_txtGoActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

private void cmdExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdExitMouseClicked
// TODO add your handling code here:
    formWindowClosing(null);
}//GEN-LAST:event_cmdExitMouseClicked

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    JOptionPane pane = new JOptionPane(
            "Are you sure you want to Exit?");
    Object[] options = new String[]{"Yes", "No"};
    pane.setOptions(options);
    JDialog dialog = pane.createDialog(this, "Are you sure?");

    dialog.setVisible(true);
    Object obj = pane.getValue();
    int result = -1;
    for (int k = 0; k < options.length; k++) {
        if (options[k].equals(obj)) {
            result = k;
        }
    }
    if (result == 1) {
        return;
    }
    System.exit(0);
}//GEN-LAST:event_formWindowClosing

private void txtGoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGoKeyPressed
    if(evt.getKeyCode() == evt.VK_ESCAPE)
    {
        if(CurrentNode != null && CurrentNode != (DefaultMutableTreeNode)(((DefaultTreeModel)(treeNavigation.getModel())).getRoot()))
        {   
            javax.swing.tree.TreePath CurrentPath = new javax.swing.tree.TreePath(CurrentNode.getPath());
            if(CurrentNode != (DefaultMutableTreeNode)(((DefaultTreeModel)(treeNavigation.getModel())).getRoot()))           
                treeNavigation.collapsePath(CurrentPath);
            CurrentNode = (DefaultMutableTreeNode)CurrentNode.getParent();
            CurrentPath = new javax.swing.tree.TreePath(CurrentNode.getPath());
            treeNavigation.setSelectionPath(CurrentPath);
            treeNavigation.scrollPathToVisible(CurrentPath);


            java.awt.Rectangle currentView = new java.awt.Rectangle(treeNavigation.getWidth(),scrollNavigation.getViewportBorderBounds().y,1,1);
    
            treeNavigation.scrollRectToVisible(currentView);
            treeNavigation.updateUI();

        }
    }
}//GEN-LAST:event_txtGoKeyPressed

private void treeNavigationValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeNavigationValueChanged
    DefaultMutableTreeNode NewNode = (DefaultMutableTreeNode)(evt.getPath().getLastPathComponent());
    if(CurrentNode != NewNode)
    {
        CurrentNode = NewNode;
        this.txtGo.requestFocus();
    }
    
}//GEN-LAST:event_treeNavigationValueChanged

private void treeNavigationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeNavigationKeyPressed
    txtGoKeyPressed(evt);
    txtGo.requestFocus();
}//GEN-LAST:event_treeNavigationKeyPressed

private void treeNavigationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeNavigationMouseClicked
// TODO add your handling code here:
    if(evt.getClickCount() == 2)
    {
        if(CurrentNode.getUserObject().getClass().getSimpleName().equals("rwNavNode"))
        {
            rwNavNode CurrentItem = (rwNavNode)(CurrentNode.getUserObject());
            if(CurrentItem.Classname != null)
            {
             LoadClass(CurrentItem.Classname);   
            }
        }
    }
}//GEN-LAST:event_treeNavigationMouseClicked

private void cmdSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdSaveMouseClicked
    if(this.CurrentSelectedForm != null)
    {
        this.CurrentSelectedForm.Save();
    }
}//GEN-LAST:event_cmdSaveMouseClicked

private void cmdSaveClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdSaveClearMouseClicked
if(this.CurrentSelectedForm != null)
    {
        this.CurrentSelectedForm.SaveClear();
    }
}//GEN-LAST:event_cmdSaveClearMouseClicked

private void cmdClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdClearMouseClicked
if(this.CurrentSelectedForm != null)
    {
        this.CurrentSelectedForm.Clear();
    }
}//GEN-LAST:event_cmdClearMouseClicked

private void cmdNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdNewMouseClicked
    if(this.CurrentSelectedForm != null)
    {
        this.CurrentSelectedForm.New();
    }

}//GEN-LAST:event_cmdNewMouseClicked

private void cmdDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDeleteMouseClicked
if(this.CurrentSelectedForm != null)
    {
        this.CurrentSelectedForm.Delete();
    }
}//GEN-LAST:event_cmdDeleteMouseClicked
    public void LoadChildren(DefaultMutableTreeNode top,List AppList)
    {
        for(int i=0;i<AppList.size();i++)
        {
            Element navitem = (Element)(AppList.get(i));
            rwNavNode thisNode;
                if(navitem.getAttribute("class") != null)
                    thisNode = new rwNavNode(navitem.getAttribute("id").getValue(),navitem.getAttribute("shortcut").getValue(),navitem.getAttribute("name").getValue(),navitem.getAttribute("icon").getValue(),navitem.getAttribute("class").getValue());
                else
                    thisNode = new rwNavNode(navitem.getAttribute("id").getValue(),navitem.getAttribute("shortcut").getValue(),navitem.getAttribute("name").getValue(),navitem.getAttribute("icon").getValue(),null);

                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(thisNode);
                top.add(newNode);
                List newList = navitem.getChildren();
                if(newList.size() > 0)
                {
                    LoadChildren(newNode,newList);
                }
        }
    }
    public void LoadClass(String classToLoad)
    {
        try{
                            ErrorHandler.printLog("Application", "LoadCLass()", classToLoad);
                            java.lang.reflect.Constructor c =  Class.forName(classToLoad).getConstructors()[0];
                            rwframework.controls.rwInternalFrame t = (rwframework.controls.rwInternalFrame)c.newInstance(this);
                            t.setVisible(true);
                            this.PaneMain.add(t);
                            t.setLocation(0,0);
                            t.moveToFront();
                            t.requestFocus();
                            try
                            {
                                t.setSelected(true);
                            }
                            catch(java.beans.PropertyVetoException ex)
                            {
                                
                            }
                            
                            
                        }catch(ClassNotFoundException nf){
                            System.out.println("class not found");
                        }catch(Exception e){
                            e.printStackTrace();
                        }
    }
    public void loadNavigation() {
        Launchers = new java.util.ArrayList();
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Materials Management");
        
        try {
            SAXBuilder b = new SAXBuilder();
            Document doc = b.build(new File(CurrentCompany.getValue("application") + ".xml"));
            Element root = doc.getRootElement();
            List AppList = root.getChildren();
            for(int i=0;i<AppList.size();i++)
            {
                Element navitem = (Element)(AppList.get(i));
                rwNavNode thisNode;
                if(navitem.getAttribute("class") != null)
                    thisNode = new rwNavNode(navitem.getAttribute("id").getValue(),navitem.getAttribute("shortcut").getValue(),navitem.getAttribute("name").getValue(),navitem.getAttribute("icon").getValue(),navitem.getAttribute("class").getValue());
                else
                    thisNode = new rwNavNode(navitem.getAttribute("id").getValue(),navitem.getAttribute("shortcut").getValue(),navitem.getAttribute("name").getValue(),navitem.getAttribute("icon").getValue(),null);

                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(thisNode);
                top.add(newNode);
                List newList = navitem.getChildren();
                if(newList.size() > 0)
                {
                    LoadChildren(newNode,newList);
                }
                
            }
            treeNavigation.setCellRenderer(new rwframework.controls.rwNavigationTreeCellRenderer());
            treeNavigation.setModel(new javax.swing.tree.DefaultTreeModel(top));

        } catch (Exception ex) {
            System.out.println("Unable to load Menu Configuration File");
        }
    }
    
    public void FormFocusLost() {
        this.cmdClear.setEnabled(false);
        this.cmdSave.setEnabled(false);
        this.cmdSaveClear.setEnabled(false);
        this.cmdNew.setEnabled(false);
        //this.cmdQuery.setEnabled(false);
        //this.cmdNext.setEnabled(false);
        //this.cmdPrevious.setEnabled(false);
        this.cmdDelete.setEnabled(false);
        //this.cmdShortcut1.setVisible(false);
        //this.cmdShortcut2.setVisible(false);
        //this.cmdShortcut3.setVisible(false);
        //this.tbNavigation.setSelectedIndex(1);
        CurrentSelectedForm = null;
        this.txtGo.requestFocus();
    }
    public void FormFocusGained(rwframework.controls.rwInternalFrame CurrentForm) {
        this.CurrentSelectedForm = CurrentForm;
        CurrentForm.ApplyToolbarSettings();
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public java.util.ArrayList Launchers;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JDesktopPane PaneMain;
    private rwframework.controls.BackgroundImagePanel backgroundImagePanel1;
    public javax.swing.JLabel cmdClear;
    public javax.swing.JLabel cmdDelete;
    private javax.swing.JLabel cmdExit;
    public javax.swing.JLabel cmdNew;
    public javax.swing.JLabel cmdSave;
    public javax.swing.JLabel cmdSaveClear;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private rwframework.controls.BackgroundImagePanel pnlNavigation;
    private rwframework.controls.BackgroundImagePanel pnlToolbar;
    private javax.swing.JScrollPane scrollNavigation;
    private javax.swing.JSplitPane splitMain;
    private javax.swing.JTree treeNavigation;
    public javax.swing.JTextField txtGo;
    // End of variables declaration//GEN-END:variables
}
